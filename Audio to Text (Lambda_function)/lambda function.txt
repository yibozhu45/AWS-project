
Q1: Where to save harvard.wav?

I have a question about the address to save "harvard.wav". In the instruction, it says:" Make sure you save it to the same directory in which your Python interpreter session is running." Then I googled the address of Python interpreter is /usr/local/bin. So I saved the file into bin (screenshot1), but when I run it, it shows the error: FileNot FoundError (screenshot error). However, I can't save it to /bin/python3 because it is locked. 

So, I don't know where to save the harvard.wav. Can you tell me where is the correct directory to save .wav file?

S1:use ls to show what under the context.
then save under the context.
the folder is one level bigger.
For example, if the directory is in Downloads. Save in Downloads not in the directory.

Q2: Syntax error in module 'lambda_function': inconsistent use of tabs and spaces in indentation

S2: Spaces are not treated as equivalent to tab. A line indented with a tab is at a different indentation from a line indented with 1, 2, 4 or 8 spaces. It means if use spaces always use spaces. If use tab, always use tab.

Q3: Difference between ' and "?

S3: No difference, but keep consistant.
////////////////////////////////////////////////////////
* python2 use virtualenv
  python3 use venv

How to zip the file inside virtualenvironment(python3)?

Step1: Install the Prerequisites
sudo apt-get install build-essential libssl-dev libffi-dev python-dev

Step 2: Install pip3 if it is already not installed on your system
a. to check the pip version pip3 -V
b. sudo apt-get update
   sudo apt install python3-pip

Step 3: Create a virtual environment through Python3-venv
a. Install virtual environment: sudo apt install -y python3-venv

b. Create virtual environment (sample_environment): python3 -m venv sample_environment 

c. Activate it: source sample_environment/bin/activate

Step 4: install lib
pip install Pillow boto3 

Step 5: go to cd $VIRTUAL_ENV/lib/python3.6/site-packages
python3.6 is the version of python. Change it when you use different version.

Step 6: zip -r9 ${OLDPWD}/function2.zip .
pay attention on [ .]

Step 7: cd ${OLDPWD}

Step 8: zip lambda_function into function2.zip 
zip -g function1.zip lambda_function.py

Step 9: deactivate the virtual environment
deactivate 

////////////////////////////////////////////////////////
How to re-size image use lambda_function?

import boto3
import os
import sys
import uuid
from urllib.parse import unquote_plus
from PIL import Image
import PIL.Image

s3_client = boto3.client('s3')

def resize_image(image_path, resized_path):
    with Image.open(image_path) as image:
        image.thumbnail(tuple(x / 2 for x in image.size))
        image.save(resized_path)

def lambda_handler(event, context):
    for record in event['Records']:
        bucket = record['s3']['bucket']['name'] # yibo2
        key = unquote_plus(record['s3']['object']['key']) # CloudComputing.jpg
        tmpkey = key.replace('/', '') # CloudComputing.jpg
        download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey) #/tmp/ff536e50-b225-499c-8861-c2c09535fe89CloudComputing.jpg
        upload_path = '/tmp/resized-{}'.format(tmpkey) #/tmp/resized-CloudComputing.jpg
        s3_client.download_file(bucket, key, download_path)
        resize_image(download_path, upload_path)
        s3_client.upload_file(upload_path, '{}-resized'.format(bucket), key)
/////////////////////////////////////////////////////////////////////////
{
  "Records":[
    {
      "eventVersion":"2.0",
      "eventSource":"aws:s3",
      "awsRegion":"us-east-1",
      "eventTime":"1970-01-01T00:00:00.000Z",
      "eventName":"ObjectCreated:Put",
      "userIdentity":{
        "principalId":"AIDAJDPLRKLG7UEXAMPLE"
      },
      "requestParameters":{
        "sourceIPAddress":"127.0.0.1"
      },
      "responseElements":{
        "x-amz-request-id":"C3D13FE58DE4C810",
        "x-amz-id-2":"FMyUVURIY8/IgAtTv8xRjskZQpcIZ9KG4V5Wp6S7S/JRWeUWerMUE5JgHvANOjpD"
      },
      "s3":{
        "s3SchemaVersion":"1.0",
        "configurationId":"testConfigRule",
        "bucket":{
          "name":"yibo2", # need change
          "ownerIdentity":{
            "principalId":"A3NL1KOZZKExample"
          },
          "arn":"arn:aws:s3:::yibo2" # need change
        },
        "object":{
          "key":"CloudComputing.jpg", # need change 
          "size":1024,
          "eTag":"d41d8cd98f00b204e9800998ecf8427e",
          "versionId":"096fKKXTRTtl3on89fVO.nfljtsv6qko"
        }
      }
    }
  ]
}
////////////////////////////////////////////////////////
>>> import speech_recognition as sr
>>> r = sr.Recognizer()
>>> harvard = sr.AudioFile('harvard.wav')
>>> with harvard as source:
...	audio = r.record(source)
...
>>> type(audio)//optional
>>> r.recognize_google(audio)
///////////////////////////////////////////////////////
import speech_recognition as sr
import os
import boto3
import sys
import uuid
from urllib.parse import unquote_plus

s3_client = boto3.client('s3')

def audio_to_text(audio_path,saved_path):
    r = sr.Recognizer()
    with sr.AudioFile(audio_path) as source:
        audio = r.record(source)
    with open(os.path.join(saved_path, 'audio2text.txt'), 'a') as file1:
        file1.write(r.recognize_google(audio))
        file1.close()

def lambda_handler(event, context):
    for record in event['Records']:
        bucket = record['s3']['bucket']['name']
        print(bucket) #yibo2
        key = unquote_plus(record['s3']['object']['key'])
        print(key) # harvard.wav
        tmpkey = key.replace('/', '')
        print(tmpkey) # harvard.wav
        download_path = '/tmp/{}{}'.format(uuid.uuid4(), tmpkey)
        print(download_path) # /tmp/ff536e50-b225-499c-8861-c2c09535fe89harvard.wav
        upload_path = '/tmp/'
        print(upload_path) #/tmp/
        s3_client.download_file(bucket, key, download_path)
        audio_to_text(download_path, upload_path)
        s3_client.upload_file(upload_path + 'audio2text.txt', '{}-resized'.format(bucket), 'audio2text.txt')
/////////////////////////////////////////////////////////////////////////////////////////
{
  "Records": [
    {
      "eventVersion": "2.0",
      "eventSource": "aws:s3",
      "awsRegion": "us-east-1",
      "eventTime": "1970-01-01T00:00:00.000Z",
      "eventName": "ObjectCreated:Put",
      "userIdentity": {
        "principalId": "AIDAJDPLRKLG7UEXAMPLE"
      },
      "requestParameters": {
        "sourceIPAddress": "127.0.0.1"
      },
      "responseElements": {
        "x-amz-request-id": "C3D13FE58DE4C810",
        "x-amz-id-2": "FMyUVURIY8/IgAtTv8xRjskZQpcIZ9KG4V5Wp6S7S/JRWeUWerMUE5JgHvANOjpD"
      },
      "s3": {
        "s3SchemaVersion": "1.0",
        "configurationId": "testConfigRule",
        "bucket": {
          "name": "yibo2",
          "ownerIdentity": {
            "principalId": "A3NL1KOZZKExample"
          },
          "arn": "arn:aws:s3:::yibo2"
        },
        "object": {
          "key": "harvard.wav",
          "size": 1024,
          "eTag": "0547986abb83074dc44469b94167f629",
          "versionId": "096fKKXTRTtl3on89fVO.nfljtsv6qko"
        }
      }
    }
  ]
}

